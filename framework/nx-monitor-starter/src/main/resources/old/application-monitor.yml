spring:
  cloud:
    circuitbreaker:
      resilience4j:
        enable: false



resilience4j:
  circuitbreaker: #熔断
    configs:
      default:
        slidingWindowSize: 100
        permittedNumberOfCallsInHalfOpenState: 10
        ringBufferSizeInClosedState: 5 # 熔断器关闭时的缓冲区大小
        ringBufferSizeInHalfOpenState: 2 # 熔断器半开时的缓冲区大小
        waitDurationInOpenState: 10000 # 熔断器从打开到半开需要的时间
        failureRateThreshold: 60 # 熔断器打开的失败阈值
        eventConsumerBufferSize: 10 # 事件缓冲区大小
        registerHealthIndicator: true # 健康监测
        automaticTransitionFromOpenToHalfOpenEnabled: false # 是否自动从打开到半开，不需要触发
        recordFailurePredicate:    com.example.resilience4j.exceptions.RecordFailurePredicate # 谓词设置异常是否为失败
        #recordExceptions: # 记录的异常
        #  - org.nianxi.eiffel.api.exception.BusinessBException
        #  - com.example.resilience4j.exceptions.BusinessAException
        #ignoreExceptions: # 忽略的异常
        #  - org.nianxi.eiffel.api.exception.EmptyFeignException
      someShared:
        slidingWindowSize: 50
        permittedNumberOfCallsInHalfOpenState: 10
    instances:
      backendA:
        baseConfig: default
        waitDurationInOpenState: 5000
      backendB:
        baseConfig: someShared
        registerHealthIndicator: true
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: TIME_BASED
        minimumNumberOfCalls: 20
        waitDurationInOpenState: 50s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
  retry: #重试
    configs:
      default:
        maxAttempts: 3
        waitDuration: 10s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException
        ignoreExceptions:
          - io.github.robwin.exception.BusinessException
      instances:
        backendA:
          baseConfig: default
        backendB:
          maxAttempts: 3
          waitDuration: 10s
          retryExceptions:
            - org.springframework.web.client.HttpServerErrorException
            - java.io.IOException
          ignoreExceptions:
            - io.github.robwin.exception.BusinessException
  bulkhead:
    configs:
      default:
        maxConcurrentCalls: 100
    instances:
      backendA:
        maxConcurrentCalls: 10
      backendB:
        maxWaitDuration: PT0.01S
        maxConcurrentCalls: 20
  thread-pool-bulkhead: #隔离
    instances:
      backendC:
        maxThreadPoolSize: 1
        coreThreadPoolSize: 1
        queueCapacity: 1
  ratelimiter: #限流
    instances:
      backendA:
        limitForPeriod: 10
        limitRefreshPeriod: 1s
        timeoutDuration: 0
        registerHealthIndicator: true
        eventConsumerBufferSize: 100
      backendB:
        limitForPeriod: 6
        limitRefreshPeriod: 500ms
        timeoutDuration: 3s


management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    prometheus:
      enabled: true
    health:
      show-details: always
  health:
    ratelimiters:
      enabled: true
    circuitbreakers:
      enabled: true
    defaults:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
