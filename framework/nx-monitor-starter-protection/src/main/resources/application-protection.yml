spring:
  cloud:
    resilience4j:
      enabled: true

management:
  endpoints:
    # Actuator HTTP 配置项，对应 WebEndpointProperties 配置类
    web:
      exposure:
        include: '*' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。
  endpoint:
    # Health 端点配置项，对应 HealthProperties 配置类
    health:
      show-details: ALWAYS # 何时显示完整的健康信息。默认为 NEVER 都不展示。可选 WHEN_AUTHORIZED 当经过授权的用户；可选 ALWAYS 总是展示。
  # 健康检查配置项
  health:
    circuitbreakers.enabled: true
    ratelimiters.enabled: true

#https://blog.csdn.net/GarfieldEr007/article/details/106699089/
resilience4j:
  circuitbreaker:
    enabled: ${spring.cloud.resilience4j.enabled}
    configs:
      default:
        record-failure-predicate: com.nx.resilience4j.exception.RecordFailurePredicate
        record-exceptions:
          - com.nx.cloud.protection.resilience4j.exception.Resilience4jException
        slow-call-duration-threshold: 60s   #慢调用阀值，请求执行的时间大于该值时会标记为慢调用
        slow-call-rate-threshold: 100       #慢调用熔断阀值，当慢调用率达到或高于该值时，进入open状态
        sliding-window-size: 100        #状态滚动收集器大小，close状态时收集多少请求状态，用于计算失败率。
        sliding-window-type: COUNT_BASED
        minimum-number-of-calls: 10  #计算错误率的最小请求数，不足最小调用次数不会触发任何变化。
        automatic-transition-fromOpen-to-half-open-enabled: false  #是否自动进入halfOpen状态，默认false-一定时间后进入halfopen，ture-需要通过接口执行。
        permitted-number-of-calls-in-half-open-state: 10   #进入halfOpen状态时，可以被调用次数，就算这些请求的失败率，低于设置的失败率变为close状态，否则变为open。
        wait-duration-in-open-state: 60s  #open状态变为half状态需要等待的时间，即熔断多久后开始尝试访问被熔断的服务。
        event-consumer-buffer-size: 10   #事件缓冲区大小？？
        register-health-indicator: true
        failure-rate-threshold: 60       #熔断器打开的失败阈值,失败率，错误率达到或高于该值则进入open状态
        ring-buffer-size-in-closed-state: 5 # 熔断器关闭时的缓冲区大小
        ring-buffer-size-in-half-open-state: 2 # 熔断器半开时的缓冲区大小
      shared:
        sliding-window-size: 100        #状态滚动收集器大小，close状态时收集多少请求状态，用于计算失败率。
        permitted-number-of-calls-in-half-open-state: 30
        wait-duration-in-open-state: 1s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
        ignore-exceptions:
          - com.nx.cloud.protection.resilience4j.exception.Resilience4jException
    instances:
      backendA:
        base-config: default
      backendB:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 10
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 5s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
        record-failure-predicate: io.github.robwin.exception.RecordFailurePredicate
  retry:
    enabled: ${spring.cloud.resilience4j.enabled}
    configs:
      default:
        max-attempts: 2 # 最大重试次数。默认为 3
        wait-duration: 100
        retry-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException
    instances:
      backendE:
        max-attempts: 3 # 最大重试次数。默认为 3
        wait-duration: 10s # 下次重试的间隔，单位：微秒。默认为 500 毫秒
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        retry-exceptions: # 需要重试的异常列表。默认为空
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException
        ignore-exceptions:  # 需要忽略的异常列表。默认为空
          - com.nx.common.exception.BaseException
  bulkhead: #舱壁 Bulkhead 指的是船舶中的舱壁，它将船体分隔为多个船舱，在船部分受损时可避免沉船。
    enabled: ${spring.cloud.resilience4j.enabled}
    configs:
      default:
        max-concurrent-calls: 100
    instances:  # Resilience4j 的信号量 Bulkhead 配置项，对应 BulkheadConfigurationProperties 属性类
      backendA:
        max-concurrent-calls: 10
      backendB:
        max-concurrent-calls: 10
        max-wait-duration: 10ms
      backendC:
        max-concurrent-calls: 1 # 并发调用数。默认为 25
        max-wait-duration: 5s # 并发调用到达上限时，阻塞等待的时长，单位：微秒。默认为 0
  thread-pool-bulkhead:
    # Resilience4j 的线程池 Bulkhead 配置项，对应 ThreadPoolBulkheadProperties 属性类
    enabled: ${spring.cloud.resilience4j.enabled}
    configs:
      default:
        max-thread-pool-size: 4
        core-thread-pool-size: 2
        queue-capacity: 2
    instances:
      backendD:
        max-thread-pool-size: 1 # 线程池的最大大小。默认为 Runtime.getRuntime().availableProcessors()
        core-thread-pool-size: 1 # 线程池的核心大小。默认为 Runtime.getRuntime().availableProcessors() - 1
        queue-capacity: 100 # 线程池的队列大小。默认为 100
        keep-alive-duration: 100s # 超过核心大小的线程，空闲存活时间。默认为 20 毫秒
  ratelimiter:
    # RateLimiter 一共有两种实现类：
    # AtomicRateLimiter：基于令牌桶限流算法实现限流。
    # SemaphoreBasedRateLimiter：基于 Semaphore 实现限流。
    enabled: ${spring.cloud.resilience4j.enabled}
    instances:
      backendA: # Resilience4j 的限流器配置项，对应 RateLimiterProperties 属性类
        eventConsumer-buffer-size: 100
        limit-for-period: 10 # 每个周期内，允许的请求数。默认为 50
        limit-refresh-period: 1s # 每个周期的时长，单位：微秒。默认为 500
        timeout-duration: 0      #最大等待时间s5s
        register-health-indicator: true # 是否注册到健康监测
      backendB:
        limit-for-period: 1 # 每个周期内，允许的请求数。默认为 50
        limit-refresh-period: 10s # 每个周期的时长，单位：微秒。默认为 500
        timeout-duration: 5s # 被限流时，阻塞等待的时长，单位：微秒。默认为 5s
        register-health-indicator: true # 是否注册到健康监测
      backendF:  # Resilience4j 的超时限制器 TimeLimiter 配置项，对应 TimeLimiterProperties 属性类
        timeout-duration: 1s         # 等待超时时间，单位：微秒。默认为 1 秒

